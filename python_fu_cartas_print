#!/usr/bin/env python

from gimpfu import *
import os

temp_layers = []

def generate(input_dir, output_dir):
    imgList = gimp.image_list()
    if(len(imgList) < 1):
        gimp.pdb.gimp_message("Open base image as first image please")
    else:
        img = imgList[len(imgList)-1] #index 0 is the rightmost image, we want the left most one 
        generateSheets(img, input_dir, output_dir)
            
    return

def addCard(image, input_dir, filename, nPos):
    card = pdb.gimp_file_load_layer(image, input_dir + '/' + filename)
    pdb.gimp_image_add_layer(image, card,0)

    if(nPos == 0):
        pdb.gimp_layer_translate(card, 0, 0)
    elif (nPos == 1):
        pdb.gimp_layer_translate(card, 747, 0)
    elif (nPos == 2):
        pdb.gimp_layer_translate(card, 1494, 0)
    elif (nPos == 3):
        pdb.gimp_layer_translate(card, 0, 1038)
    elif (nPos == 4):
        pdb.gimp_layer_translate(card, 747, 1038)
    elif (nPos == 5):
        pdb.gimp_layer_translate(card, 1494, 1038)
    elif (nPos == 6):
        pdb.gimp_layer_translate(card, 0, 2076)
    elif (nPos == 7):
        pdb.gimp_layer_translate(card, 747, 2076)
    elif (nPos == 8):
        pdb.gimp_layer_translate(card, 1494, 2076)
    else:
        gimp.pdb.gimp_message("El mundo se ha roto")
        return 

    temp_layers.append(card)

def resetSheet(image):
    global temp_layers

    for l in temp_layers:
        image.remove_layer(l) 

    temp_layers = []

def saveSheet(image, output_dir, nSheet):
    new_image = pdb.gimp_image_duplicate(image)
    layer = pdb.gimp_image_merge_visible_layers(new_image, CLIP_TO_IMAGE)
    pdb.gimp_file_save(new_image, layer, output_dir + '/' + str(nSheet) + '.pdf', '?')
    pdb.gimp_image_delete(new_image)
121 

def generateSheets(image, input_dir, output_dir):
    listed_dir = os.listdir(input_dir)
    n=-1 
    nSheet = 1
    for i in range(len(listed_dir)):
        n = i%9
        addCard(image, input_dir, listed_dir[i], n)
        # Ha llegado al final de la hoja, reseteamos
        if (n == 8 or (i == len(listed_dir) - 1)):
            saveSheet(image, output_dir, nSheet)
            resetSheet(image)
            nSheet += 1
    return
        
register(
    "Generate_PrintSheets",
    "Generate_PrintSheets from a folder. First create an empty A4 image",
    "Generate_PrintSheets from empty A4",
    "Javiortig",
    "Javiortig",
    "2022",
    "Generate_PrintSheets",
    "",
    [
    (PF_DIRNAME, "dir", "Input directory", "/home/javiortig/pokemon_card_game/mis_cartas/movimientos"),
    (PF_DIRNAME, "dir", "output directory", "/home/javiortig/pokemon_card_game/hojas_impresion"),
    ],
    [],
    generate, menu="<Image>/Image/Generate_PrintSheets")

main()